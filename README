################## DESCRIPTION ####################
Server + Client
C socket programing project
I used TCP for this project. SOCK_STREAM (TCP) or SOCK_DGRAM (UDP)

Refer some starter code from here,
http://www.binarytides.com/server-client-example-c-sockets-linux/

################# IMPLEMENTATION ###################
<I> server.c
The server is able to deal with multi-client by using threads.
A thread can be assigned for each connected client which will handle communication with the client.
1. Create socket
2. Bind to address and port 8888
3. Put in listening mode
4. Accept connections
5. Add the integer received from clients OR return current total

<II> client.c
The client is a little similar to the server implementation,
1. Create socket
2. Connect to the remote server (Loop back ip address: 127.0.0.1 for testing on the same machine)
3. Specify action: a for addition, b for get current total, q for quit

<III> send/recv int32 over TCP socket
It's little tricky to send and receive an integer value over the TCP socket.
send() and recv() are dealing with bytes. Since we are going to send 4 bytes integer,
the Network order requires Big-Endian formatting.
Therefore, when we send, we need convert the integer using htonl() before sending;
using ntohl() after receiving.


################# COMPILE & RUN ###################
Edit on XCode but compile and run through terminal using gcc at the same machine.

[Environment] OSX Yosemite (Version 10.10.2)
$ gcc --version
Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/include/c++/4.2.1
Apple LLVM version 6.0 (clang-600.0.56) (based on LLVM 3.5svn)
Target: x86_64-apple-darwin14.1.0
Thread model: posix

[COMPILE] gcc client.c -o client
          gcc server.c -o server

[RUN] ./client
      ./server


################# SAMPLE OUTPUT ###################
Here, I mimic 1 server to 2 clients case.
Both clients are able to send integers to the server for addition;
Both of them can get the current total value back.

In this scenario, the CONCURRENCY will happen,
i.e. one client may send integer to the server for addition,
at the same time, the other client would want to get the total value back.

For the next step, I would add locks for the access the critical section (total).

~~~~~~~~~~~~~~~~~~~~~~~~~~ CLIENT 1 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Cans-MacBook-Pro:ServerClient2 canxiong$ gcc client.c -o client
Cans-MacBook-Pro:ServerClient2 canxiong$ ./client
Socket created
Connected

**********************************
Option a: specify a number for addition.
Option b: get total from server.
Option c: quit.
**********************************
Please specify actions, a(add) or b(get) or q(quit)? a
---- Addition action: [a] ----
Please enter a number: 7
------ Addition is done ------

Please specify actions, a(add) or b(get) or q(quit)? a
---- Addition action: [a] ----
Please enter a number: 8
------ Addition is done ------

Please specify actions, a(add) or b(get) or q(quit)? b
--- Get total action: [b] ---
-------- Total = [15] --------

Please specify actions, a(add) or b(get) or q(quit)? b
--- Get total action: [b] ---
-------- Total = [15] --------

Please specify actions, a(add) or b(get) or q(quit)? a
---- Addition action: [a] ----
Please enter a number: 79
------ Addition is done ------

Please specify actions, a(add) or b(get) or q(quit)? b
--- Get total action: [b] ---
-------- Total = [96] --------

Please specify actions, a(add) or b(get) or q(quit)? q
------------ Byebye -----------


~~~~~~~~~~~~~~~~~~~~~~~~~~ CLIENT 2 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Cans-MacBook-Pro:ServerClient2 canxiong$ ./client
Socket created
Connected

**********************************
Option a: specify a number for addition.
Option b: get total from server.
Option c: quit.
**********************************
Please specify actions, a(add) or b(get) or q(quit)? a
---- Addition action: [a] ----
Please enter a number: 2
------ Addition is done ------

Please specify actions, a(add) or b(get) or q(quit)? b
--- Get total action: [b] ---
-------- Total = [96] --------

Please specify actions, a(add) or b(get) or q(quit)? w
Wrong Option.

Please specify actions, a(add) or b(get) or q(quit)? q
------------ Byebye -----------

~~~~~~~~~~~~~~~~~~~~~~~~~~ SERVER ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Cans-MacBook-Pro:ServerClient2 canxiong$ gcc server.c -o server
Cans-MacBook-Pro:ServerClient2 canxiong$ ./server
Socket created
bind done
Waiting for incoming connections...
Connection accepted
Handler assigned
server---> integer: 7, total: 7
server---> integer: 8, total: 15
server writes total [15] back
server writes total [15] back
server---> integer: 79, total: 94
Connection accepted
Handler assigned
server---> integer: 2, total: 96
server writes total [96] back
Client disconnected
server writes total [96] back
Client disconnected











